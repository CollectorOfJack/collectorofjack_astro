---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  title: string;
  description?: string;
  publishDate?: Date;
  updateDate?: Date;
  tags?: Array<{ slug: string; title: string }>;
  authorId?: string;
  url?: string;
  image?: {
    src: string;
    width: number;
    height: number;
    format: string;
  };
  price?: string; // Added for Product schema
  brand?: string; // Added for Product schema
  sku?: string;   // Optional SKU
  gtin?: string;  // Optional GTIN
}

const { 
  title, 
  description, 
  publishDate, 
  updateDate, 
  tags, 
  authorId, 
  url, 
  image, 
  price, 
  brand, 
  sku, 
  gtin 
} = Astro.props;

// Fetch authors from the collection
const authors = await getCollection('authors');

// Normalize `authorId` and find the corresponding author
const authorSlug = typeof authorId === 'string' ? authorId : null;
const author = authors.find((a) => a.slug === authorSlug)?.data || {
  name: 'Unknown Author',
  bio: 'No bio available',
  url: '#',
};

if (!authorSlug || !author) {
  console.error(`Author "${authorSlug}" not found in authors collection.`);
}

// Prepare BlogPosting schema
const blogSchema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title || 'Untitled Post',
  description: description || 'No description available.',
  keywords: tags?.map((tag) => tag.title).join(', ') || '',
  author: {
    "@type": "Person",
    name: author.name,
    url: author.url,
  },
  image: image
    ? {
        "@type": "ImageObject",
        url: image.src,
        width: image.width,
        height: image.height,
      }
    : undefined,
  datePublished: publishDate ? new Date(publishDate).toISOString() : undefined,
  dateModified: updateDate ? new Date(updateDate).toISOString() : undefined,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": url,
  },
};
console.log('inside json');
// Prepare Product schema if product-related fields are present
let productSchema;

console.log('price: ', price);

if (price || brand || sku || gtin) {
  console.log('inside product');
  productSchema = {
    "@context": "https://schema.org",
    "@type": "Product",
    name: title || 'Unnamed Product',
    image: image?.src || '',
    description: description || '',
    sku: sku || url || '',
    gtin12: gtin || undefined,
    brand: {
      "@type": "Brand",
      name: brand || 'Collector Of Jack',
    },
    offers: {
      "@type": "Offer",
      url: url || '',
      priceCurrency: "USD",
      price: price?.replace('$', '') || "999.99",
      itemCondition: "https://schema.org/NewCondition",
      availability: "https://schema.org/LimitedAvailability",
      hasMerchantReturnPolicy: {
        "@type": "MerchantReturnPolicy",
        applicableCountry: "US",
        returnPolicyCategory: "https://schema.org/MerchantReturnFiniteReturnWindow",
        merchantReturnDays: 15,
        returnMethod: "https://schema.org/ReturnInStore",
      },
      shippingDetails: {
        "@type": "OfferShippingDetails",
        shippingRate: {
          "@type": "MonetaryAmount",
          value: 0.00,
          currency: "USD",
        },
        shippingDestination: {
          "@type": "DefinedRegion",
          addressCountry: "US",
        },
        deliveryTime: {
          "@type": "ShippingDeliveryTime",
          transitTime: {
            "@type": "QuantitativeValue",
            minValue: 0,
            maxValue: 0,
            unitCode: "DAY",
          },
        },
        shippingLabel: "No shipping offered",
      },
    },
    google_product_category: "Food, Beverages & Tobacco > Beverages > Alcoholic Beverages > Liquor & Spirits",
  };
}
---
<script type="application/ld+json" set:html={JSON.stringify(blogSchema)} />

{productSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
)}
